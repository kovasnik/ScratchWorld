@using ScratchWorld.ViewModels
@using Newtonsoft.Json
@*@model List<MapViewModel>*@

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <title>Esri Leaflet Tutorials: Display a map</title>

    <!-- Load Leaflet from CDN -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

    <!-- Load Esri Leaflet from CDN -->
    <script src="https://unpkg.com/esri-leaflet@3.0.12/dist/esri-leaflet.js"></script>
    <script src="https://unpkg.com/esri-leaflet-vector@4.2.3/dist/esri-leaflet-vector.js"></script>

    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
        }

        .mapcontainer {

            max-width: 100%;
            padding: 0;
        }
        #map {
            position: static;
            top: 0;
            bottom: 0;
            right: 0;
            left: 0;
            width: 100%;
            height: 840px;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 14px;
            color: #323232;
        }

        .leaflet-container {
            height: 400px;
            width: 600px;
            max-width: 100%;
            max-height: 100%;
        }

        .info {
            text-align:center;
            padding: 6px 8px;
            font: 14px/16px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255,255,255,0.8);
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            border-radius: 5px;
        }

            .info h4 {
                margin: 0 0 5px;
                color: #777;
            }

        .legend {
            line-height: 18px;
            color: #555;
        }

            .legend i {
                width: 18px;
                height: 18px;
                float: left;
                margin-right: 8px;
                opacity: 0.7;
            }
    </style>

</head>

<body>
    <div class="mapcontainer"><div id="map"></div></div>

    <script type="text/javascript" src="geoJSON/FullUkr.js"></script>
    <script type="text/javascript" src="geoJSON/ukr-obl.js"></script>

    <script type="text/javascript">
        
        const map = L.map("map", {
          minZoom: 2
        })

        map.setView([49.0139, 31.2858], 6.5);

        const apiKey = "AAPK32e2ea9121ef44c19b708ad308e51a07ZcHvl99KO2dLUl7io6C5JwKdC14dNus9o_hFSiJgzyodwYZI7-nqSG7XEuh9vDX-";

        const basemapEnum = "arcgis/streets";
        L.esri.Vector.vectorBasemapLayer(basemapEnum, {
          apiKey: apiKey
        }).addTo(map);
        //L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        //    maxZoom: 19,
        //    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        //}).addTo(map);

        
        const regions = @Html.Raw(ViewBag.RegionsJson);
        console.log(regions)
        const geoJsonFeatures = regions.map(region => ({
            type: "Feature",
            properties: {
                regionId: region.RegionId,
                name: region.Name,
                ukrName: region.UkrName,
                colorPalette: region.ColorPalette,
                status: region.Status
            },
            geometry: {
                type: "Polygon",
                coordinates: JSON.parse(region.Coordinates) 
            }
        }));
        
        const geojson = L.geoJson(geoJsonFeatures, {
                style,
                onEachFeature
            }).addTo(map);

        function getColor(d) {
            return d == 0 ? 'white' :
                d == 1 ? 'red' :
                    d == 2 ? 'blue' :
                        'green' ;
        }

        function style(feature) {
            return {
                fillColor: getColor(feature.properties.status),
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.5
            };
        }

        function highlightFeature(e) {
            const layer = e.target;

            layer.setStyle({
                weight: 5,
                color: '#666',
                dashArray: '',
                fillOpacity: 0.7
            });

            layer.bringToFront();

            info.update(layer.feature.properties);
        }

        function resetHighlight(e) {
            var currentColor = e.target.options.fillColor;
            geojson.resetStyle(e.target);
            e.target.setStyle({ fillColor: currentColor });
            info.update();
        }

        function zoomToFeature(e) {
            map.fitBounds(e.target.getBounds());
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: openForm
            });
        }

        //============================form 
        function openForm(e) {
            const layer = e.target;

            const formHtml = `
                    <div class="form-popup" id="myForm">
                        <h3>${layer.feature.properties.name}</h3>
                        <button onclick="changeColor(1, '${layer._leaflet_id}')">Red</button>
                        <button onclick="changeColor(2, '${layer._leaflet_id}')">Blue</button>
                        <button onclick="changeColor(3, '${layer._leaflet_id}')">Green</button>
                        <button onclick="changeColor(0, '${layer._leaflet_id}')">White</button>
                    </div>
                `;

            L.popup()
                .setLatLng(e.latlng)
                .setContent(formHtml)
                .openOn(map);
        }

        function changeColor(status, layerId) {
            const layer = geojson.getLayer(layerId);

            layer.feature.properties.status = status;
            layer.setStyle(style(layer.feature));
            console.log(layer);

            const payload = {
                regionId: layer.feature.properties.regionId,
                colorPalette: layer.feature.properties.colorPalette,
                status: status
            };
            const payloadString = JSON.stringify(payload);
            console.log("Sending JSON payload: ", JSON.stringify(payload));

            fetch('https://localhost:7178/Map/Index', {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json'
                 },
                 body: JSON.stringify(payload)
             }).then(response => response.json())
             .then(data => console.log(data))
             .catch(error => console.error('Error:', error));

            map.closePopup();
        }
        
        //===========================info
        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info'); 
            this.update();
            return this._div;
        };

        info.update = function (props) {
            this._div.innerHTML = '<h4>Oblast name</h4>' + (props ?
                '<b>' + props.name + '</b>'
                : 'Hover over a oblast');
        };

        info.addTo(map);

        //=============================legend
        var legend = L.control({ position: 'bottomright' });
        legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend'),
                grades = [0, 1, 2, 3],
                labels = [];
            for (var i = 0; i < grades.length; i++) {
                if (grades[i] == 0) {
                    div.innerHTML += '<i style="background:' + getColor(grades[i]) + '"></i> ' + 'Not interested<br>';
                } else if (grades[i] == 1) {
                    div.innerHTML += '<i style="background:' + getColor(grades[i]) + '"></i> ' + 'Want to visit<br>';
                } else if (grades[i] == 2) {
                    div.innerHTML += '<i style="background:' + getColor(grades[i]) + '"></i> ' + 'Living in<br>';
                } else if (grades[i] == 3) {
                    div.innerHTML += '<i style="background:' + getColor(grades[i]) + '"></i> ' + 'Visited<br>';
                }
            }
            return div;
        };
        legend.addTo(map);
    </script>

</body>
