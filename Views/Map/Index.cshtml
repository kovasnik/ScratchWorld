<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <title>Esri Leaflet Tutorials: Display a map</title>

    <!-- Load Leaflet from CDN -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>

    <!-- Load Esri Leaflet from CDN -->
    <script src="https://unpkg.com/esri-leaflet@3.0.12/dist/esri-leaflet.js"></script>
    <script src="https://unpkg.com/esri-leaflet-vector@4.2.3/dist/esri-leaflet-vector.js"></script>

    <style>
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
        }

        .mapcontainer {

            max-width: 100%;
            padding: 0;
        }
        #map {
            position: static;
            top: 0;
            bottom: 0;
            right: 0;
            left: 0;
            width: 100%;
            height: 800px;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 14px;
            color: #323232;
        }

        .leaflet-container {
            height: 400px;
            width: 600px;
            max-width: 100%;
            max-height: 100%;
        }

        .info {
            text-align:center;
            padding: 6px 8px;
            font: 14px/16px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255,255,255,0.8);
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            border-radius: 5px;
        }

            .info h4 {
                margin: 0 0 5px;
                color: #777;
            }
    </style>

</head>

<body>
    <div class="mapcontainer"><div id="map"></div></div>

    <script type="text/javascript" src="geoJSON/FullUkr.js"></script>
    <script type="text/javascript" src="geoJSON/ukr-obl.js"></script>

    <script type="text/javascript">

        const map = L.map("map", {
          minZoom: 2
        })

        map.setView([49.0139, 31.2858], 6.5);
        //map.setView([37.8, -96], 4);

        const apiKey = "AAPK32e2ea9121ef44c19b708ad308e51a07ZcHvl99KO2dLUl7io6C5JwKdC14dNus9o_hFSiJgzyodwYZI7-nqSG7XEuh9vDX-";

        const basemapEnum = "arcgis/streets";

        L.esri.Vector.vectorBasemapLayer(basemapEnum, {
          apiKey: apiKey
        }).addTo(map);

        const geojson = L.geoJson(ukraineData, {
            style,
            onEachFeature
        }).addTo(map);

        //function getColor(d) {
        //    return d > 1000 ? '#800026' :
        //        d > 500 ? '#BD0026' :
        //            d > 200 ? '#E31A1C' :
        //                d > 100 ? '#FC4E2A' :
        //                    d > 50 ? '#FD8D3C' :
        //                        d > 20 ? '#FEB24C' :
        //                            d > 10 ? '#FED976' :
        //                                '#FFEDA0';
        //}

        function style(feature) {
            return {
                fillColor: 'blue',
                weight: 2,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7
            };
        }

        function highlightFeature(e) {
            const layer = e.target;

            layer.setStyle({
                weight: 5,
                color: '#666',
                dashArray: '',
                fillOpacity: 0.7
            });

            layer.bringToFront();

            info.update(layer.feature.properties);
        }

        function resetHighlight(e) {
            geojson.resetStyle(e.target);
            info.update();
        }

        //function zoomToFeature(e) {
        //    map.fitBounds(e.target.getBounds());
        //}
        //function popupForm(e){
        //    e.bindPopup();
        //}
        //geojson.eachLayer(function (layer) {
        //    layer.bindPopup(layer.feature.properties.name);
        //});
        // Функция для создания содержимого попапа
        function createPopupContent(layer) {
            return `
                <div>
                    <h4>${layer.feature.properties.name}</h4>
                    <p>Выберите цвет:</p>
                    <button onclick="changeColor('${layer._leaflet_id}', 'red')">Красный</button>
                    <button onclick="changeColor('${layer._leaflet_id}', 'green')">Зеленый</button>
                    <button onclick="changeColor('${layer._leaflet_id}', 'blue')">Синий</button>
                </div>
            `;
        }

        // Функция для изменения цвета слоя
        function changeColor(layerId, color) {
            var layer = geojson.getLayer(layerId);
            layer.setStyle({ fillColor: color, fillOpacity: 0.5 });
        }

        // Создание GeoJSON слоя и привязка попапа
        geojson.eachLayer(function (layer) {
            layer.bindPopup(createPopupContent(layer));
        });
        //map.fitBounds(geojson.getBounds());

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                //click: zoomToFeature
            });
        }

        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
            this.update();
            return this._div;
        };

        // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
            this._div.innerHTML = '<h4>Oblast name</h4>' + (props ?
                '<b>' + props['name:en'] + '</b>'
                : 'Hover over a oblast');
        };

        info.addTo(map);

    </script>

</body>

</html>